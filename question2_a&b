// 2(A) ANSWER

#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <unistd.h>

#include <arpa/inet.h>


#define MINIMUM_NUMBER 100

#define MAXIMUM_NUMBER 999

#define BUFFER_SIZE 1024


int main()

{

    int socket_s, socket_c;

    struct sockaddr_in address_s, address_c;

    socklen_t c_addr_length;

    char buffer[BUFFER_SIZE];


    // Create server socket

    socket_s = socket(AF_INET, SOCK_STREAM, 0);

 if (socket_s == -1)

    {

        perror("fail to create socket");

        exit(1);

    }


    // Set server address

    address_s.sin_family = AF_INET;

    address_s.sin_addr.s_addr = INADDR_ANY;

    address_s.sin_port = htons(8443); //insert port number


    // Bind server socket to the specified IP address and port

    if (bind(socket_s, (struct sockaddr *)&address_s, sizeof(address_s)) < 0)

    {
        perror("fail to bind");

        exit(1);

    }


    // Listen for incoming connections
  if (listen(socket_s, 5) < 0)

    {

        perror("fail to listen");

        exit(1);

    }


    printf("server listening on port 8443 ...\n");


    while (1)

    {

        // Accept client connection

        c_addr_length = sizeof(address_c);

        socket_c = accept(socket_s, (struct sockaddr *)&address_c, &c_addr_length);

        if (socket_c < 0)

        {

            perror("fail to accept connection");

            exit(1);

   }


        printf("lient connected\n");


        // Generate random number

        int random_number = (rand() % (MAXIMUM_NUMBER - MINIMUM_NUMBER + 1)) + MINIMUM_NUMBER;


        // Convert number to string

        sprintf(buffer, "%d", random_number);


        // Send random number to client

        if (send(socket_c, buffer, strlen(buffer), 0) < 0)

        {

            perror("fail to send data");

            exit(1);

        }


        printf("random number sent: %s\n", buffer);


        // Close the client socket

   close(socket_c);

        printf("client has been disconnected\n");

    }


    // Close the server socket

    close(socket_s);


    return 0;

}


// 2(B) ANSWER
#include <stdlib.h>

#include <string.h>

#include <unistd.h>

#include <arpa/inet.h>


#define BUFFER_SIZE 1024


int main()

{

    int socket_c;

    struct sockaddr_in address_s;

    char buffer[BUFFER_SIZE];


    // Create the client socket

    socket_c = socket(AF_INET, SOCK_STREAM, 0);

    if (socket_c == -1)

    {

        perror("Socket creation failed");
       exit(1);

    }


    // Set up the server address

    address_s.sin_family = AF_INET;

    address_s.sin_port = htons(8443); // Use the same port as the server

    if (inet_pton(AF_INET, "192.168.79.132", &address_s.sin_addr) <= 0)

    {

        perror("Invalid address or address not supported");

        exit(1);

    }


    // Connect to the server

    if (connect(socket_c, (struct sockaddr *)&address_s, sizeof(address_s)) < 0)

    {

        perror("Connection failed");

        exit(1);

    }
// Receive the random number from the server

    int bytes_received = recv(socket_c, buffer, BUFFER_SIZE - 1, 0);

    if (bytes_received < 0)

    {

        perror("Receiving data failed");

        exit(1);

    }


    // Null-terminate the received data

    buffer[bytes_received] = '\0';


    // Print the received random number

    printf("Received random number: %s\n", buffer);


    // Close the client socket

    close(socket_c);


    return 0;

}
